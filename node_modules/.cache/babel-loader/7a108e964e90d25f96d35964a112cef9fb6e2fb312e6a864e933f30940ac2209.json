{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\html_course\\\\rutes app\\\\my-app\\\\src\\\\context\\\\myProvider.jsx\",\n  _s = $RefreshSig$();\nimport { MyContext } from './myContext';\nimport { useEffect, useState } from 'react';\nimport { routeList } from '../data/routeList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst setLocalStorageData = () => {\n  localStorage.setItem('routesList', JSON.stringify(routeList()));\n};\nexport const MyProvider = ({\n  children\n}) => {\n  _s();\n  const [routesList, setRoutesList] = useState(routeList()); // routeList se refiere a la lista de rutas(direcciónes) que el usuario crea, estas direcciónes pueden tener más datos como telefono,nombre, correo etc\n\n  const [routesCompleted, setRoutesCompleted] = useState([]); // este estado contiene las direcciónes que el usuario marcó como completadas\n\n  const [routesTrashed, setRoutesTrashed] = useState([]); // este estado contiene las direcciónes que el usuario elimino, sirve como papelera\n\n  const [currentClientData, setCurrentClientData] = useState({}); //este estado se refiere a una unica dirección la cual se define con una interacción especifica del usuario ( dar click a un boton para mostrar más info sobre esa dirección )\n\n  const [showMore, setShowMore] = useState(false); //este estado varia entre true y false para crear el componente que mostará la info adicional que da currentClientData \n\n  useEffect(() => {\n    setLocalStorageData(), [routesList];\n  });\n  return /*#__PURE__*/_jsxDEV(MyContext.Provider, {\n    value: {\n      routesList,\n      setRoutesList,\n      routesCompleted,\n      setRoutesCompleted,\n      routesTrashed,\n      setRoutesTrashed,\n      currentClientData,\n      setCurrentClientData,\n      showMore,\n      setShowMore\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n_s(MyProvider, \"tzVTYpIb/fmPMGMU/czv7i1kCeE=\");\n_c = MyProvider;\nvar _c;\n$RefreshReg$(_c, \"MyProvider\");","map":{"version":3,"names":["MyContext","useEffect","useState","routeList","jsxDEV","_jsxDEV","setLocalStorageData","localStorage","setItem","JSON","stringify","MyProvider","children","_s","routesList","setRoutesList","routesCompleted","setRoutesCompleted","routesTrashed","setRoutesTrashed","currentClientData","setCurrentClientData","showMore","setShowMore","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/html_course/rutes app/my-app/src/context/myProvider.jsx"],"sourcesContent":["\r\nimport { MyContext } from './myContext'\r\nimport { useEffect, useState } from 'react';\r\nimport { routeList } from '../data/routeList';\r\n\r\nconst setLocalStorageData = ()=>{\r\n\r\n    localStorage.setItem('routesList', JSON.stringify( routeList() ) )\r\n\r\n};\r\n\r\nexport const MyProvider = ( {children} ) => {\r\n\r\n    const [ routesList , setRoutesList ] = useState( routeList() ); // routeList se refiere a la lista de rutas(direcciónes) que el usuario crea, estas direcciónes pueden tener más datos como telefono,nombre, correo etc\r\n\r\n    const [ routesCompleted, setRoutesCompleted ] = useState([]); // este estado contiene las direcciónes que el usuario marcó como completadas\r\n\r\n    const [ routesTrashed, setRoutesTrashed ] = useState([]); // este estado contiene las direcciónes que el usuario elimino, sirve como papelera\r\n\r\n    const [ currentClientData, setCurrentClientData ] = useState({}); //este estado se refiere a una unica dirección la cual se define con una interacción especifica del usuario ( dar click a un boton para mostrar más info sobre esa dirección )\r\n\r\n    const [ showMore, setShowMore ] = useState( false ); //este estado varia entre true y false para crear el componente que mostará la info adicional que da currentClientData \r\n\r\n    useEffect(() => { setLocalStorageData(), [routesList]});\r\n    \r\n\r\n    return (\r\n        \r\n        <MyContext.Provider  value = {{ routesList , setRoutesList,  routesCompleted, setRoutesCompleted,\r\n                                        routesTrashed, setRoutesTrashed , currentClientData, setCurrentClientData,\r\n                                        showMore, setShowMore          \r\n        }}>\r\n\r\n            { children }\r\n\r\n        </MyContext.Provider>\r\n\r\n    )\r\n}\r\n"],"mappings":";;AACA,SAASA,SAAS,QAAQ,aAAa;AACvC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,mBAAmB,GAAGA,CAAA,KAAI;EAE5BC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEC,IAAI,CAACC,SAAS,CAAEP,SAAS,CAAC,CAAE,CAAE,CAAC;AAEtE,CAAC;AAED,OAAO,MAAMQ,UAAU,GAAGA,CAAE;EAACC;AAAQ,CAAC,KAAM;EAAAC,EAAA;EAExC,MAAM,CAAEC,UAAU,EAAGC,aAAa,CAAE,GAAGb,QAAQ,CAAEC,SAAS,CAAC,CAAE,CAAC,CAAC,CAAC;;EAEhE,MAAM,CAAEa,eAAe,EAAEC,kBAAkB,CAAE,GAAGf,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE9D,MAAM,CAAEgB,aAAa,EAAEC,gBAAgB,CAAE,GAAGjB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE1D,MAAM,CAAEkB,iBAAiB,EAAEC,oBAAoB,CAAE,GAAGnB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAElE,MAAM,CAAEoB,QAAQ,EAAEC,WAAW,CAAE,GAAGrB,QAAQ,CAAE,KAAM,CAAC,CAAC,CAAC;;EAErDD,SAAS,CAAC,MAAM;IAAEK,mBAAmB,CAAC,CAAC,EAAE,CAACQ,UAAU,CAAC;EAAA,CAAC,CAAC;EAGvD,oBAEIT,OAAA,CAACL,SAAS,CAACwB,QAAQ;IAAEC,KAAK,EAAI;MAAEX,UAAU;MAAGC,aAAa;MAAGC,eAAe;MAAEC,kBAAkB;MAChEC,aAAa;MAAEC,gBAAgB;MAAGC,iBAAiB;MAAEC,oBAAoB;MACzEC,QAAQ;MAAEC;IAC1C,CAAE;IAAAX,QAAA,EAEIA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEM,CAAC;AAG7B,CAAC;AAAAhB,EAAA,CA3BYF,UAAU;AAAAmB,EAAA,GAAVnB,UAAU;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}