{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\html_course\\\\rutes app\\\\my-app\\\\src\\\\components\\\\RouteListFolder\\\\routeListComponent.jsx\",\n  _s = $RefreshSig$();\nimport { ClientCardData } from './clientCardData';\nimport { ClientCardOptions } from './clientCardOptions';\nimport '../../styles/routesListComponentStyle.css';\nimport '../../styles/temporal.css';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const RouteListComponent = ({\n  routesList,\n  setRoutesList,\n  routesCompleted,\n  setRoutesCompleted,\n  routesTrashed,\n  setRoutesTrashed\n}) => {\n  _s();\n  //Este componente se encarga de dibujar una lista con las direcciónes que el usuario ingresa usando un map\n  //ClientCardData muestra los datos que se ingresaron, ClientCardOptions contiene dos botones con los que se puede interactuar con cada elemento de manera individual\n\n  const [showFilters, setShowFilters] = useState(false);\n  const sortList = condition => {\n    // sortlist se encarga de organizar la lista de rutas, condition = true ( de menor a mayor ) condition = false ( de mayor a menor )\n\n    const sortedList = condition ? [...routesList].sort((a, b) => b.directionRoute.localeCompare(a.directionRoute)) : [...routesList].sort((a, b) => a.directionRoute.localeCompare(b.directionRoute));\n    setRoutesList(sortedList);\n    setShowFilters(false);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"FilterComponent\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowFilters(!showFilters),\n        className: \"buttonFilter\",\n        children: \" Organizar direcci\\xF3nes \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: showFilters ? 'filterContainerOn' : 'filterContainerOff',\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"filterOption\",\n          onClick: () => sortList(true),\n          children: \" Mayor a Menor \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"filterOption\",\n          onClick: () => sortList(false),\n          children: \" Menor a Mayor \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"RoutesListContainer\",\n      children: routesList.map(e => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"clientCard\",\n        children: [/*#__PURE__*/_jsxDEV(ClientCardData, {\n          clientData: e\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ClientCardOptions, {\n          clientData: e,\n          setRoutesList: setRoutesList,\n          routesList: routesList,\n          routesCompleted: routesCompleted,\n          setRoutesCompleted: setRoutesCompleted,\n          routesTrashed: routesTrashed,\n          setRoutesTrashed: setRoutesTrashed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)]\n      }, e.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(RouteListComponent, \"wyZGJoG1NfghqiGdCWCEB05gyEQ=\");\n_c = RouteListComponent;\nvar _c;\n$RefreshReg$(_c, \"RouteListComponent\");","map":{"version":3,"names":["ClientCardData","ClientCardOptions","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","RouteListComponent","routesList","setRoutesList","routesCompleted","setRoutesCompleted","routesTrashed","setRoutesTrashed","_s","showFilters","setShowFilters","sortList","condition","sortedList","sort","a","b","directionRoute","localeCompare","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","e","clientData","id","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/html_course/rutes app/my-app/src/components/RouteListFolder/routeListComponent.jsx"],"sourcesContent":["import { ClientCardData } from './clientCardData';\r\nimport { ClientCardOptions } from './clientCardOptions';\r\n\r\nimport '../../styles/routesListComponentStyle.css';\r\nimport '../../styles/temporal.css'\r\nimport { useState } from 'react';\r\n\r\nexport const RouteListComponent = ({ routesList, setRoutesList, routesCompleted, setRoutesCompleted, routesTrashed, setRoutesTrashed }) => {\r\n\r\n//Este componente se encarga de dibujar una lista con las direcciónes que el usuario ingresa usando un map\r\n//ClientCardData muestra los datos que se ingresaron, ClientCardOptions contiene dos botones con los que se puede interactuar con cada elemento de manera individual\r\n    \r\nconst [ showFilters, setShowFilters] = useState(false)\r\n\r\n  \r\nconst sortList = ( condition )=>{\r\n  \r\n  // sortlist se encarga de organizar la lista de rutas, condition = true ( de menor a mayor ) condition = false ( de mayor a menor )\r\n\r\n  const sortedList = condition ? \r\n  [...routesList].sort( (a,b)=> b.directionRoute.localeCompare(a.directionRoute) ) : \r\n  [...routesList].sort( (a,b)=> a.directionRoute.localeCompare(b.directionRoute) )\r\n\r\n  setRoutesList( sortedList );\r\n  setShowFilters(false)\r\n\r\n} \r\n\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n      <div className='FilterComponent'>\r\n\r\n        <button onClick = {()=> setShowFilters(!showFilters)} className='buttonFilter'> Organizar direcciónes </button>\r\n\r\n        <div className = { showFilters? 'filterContainerOn':'filterContainerOff' }>\r\n\r\n          <button className='filterOption' onClick={()=> sortList( true )}> Mayor a Menor </button>\r\n          <button className='filterOption' onClick={()=> sortList( false )}> Menor a Mayor </button>\r\n\r\n        </div>\r\n      </div>\r\n\r\n      <section className = 'RoutesListContainer'>\r\n\r\n        { routesList.map( (e)=>\r\n        \r\n          <div key = { e.id } className='clientCard'>\r\n\r\n            <ClientCardData clientData = { e }/>\r\n\r\n            <ClientCardOptions  clientData = { e } \r\n                                setRoutesList = { setRoutesList } \r\n                                routesList = { routesList }\r\n                                routesCompleted = { routesCompleted }\r\n                                setRoutesCompleted = { setRoutesCompleted }\r\n                                routesTrashed = { routesTrashed }\r\n                                setRoutesTrashed = { setRoutesTrashed }/>\r\n\r\n          </div>\r\n        \r\n        ) }\r\n\r\n        </section>\r\n    </>\r\n   \r\n  )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}